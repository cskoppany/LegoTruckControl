///////////////////////////////////////////////////////////////////////////////
// 
// LEGO TRUCK 
//
///////////////////////////////////////////////////////////////////////////////

module LegoTruckControl {

import from GPIOPinPort all;
import from GPIO_Common all;
import from TCCFileIO_Functions all;
import from IoT_FT_Framework_Definitions all;
import from IoT_FT_Framework_Functions all;
import from IFW_MQTT_Client_Definitions all;
import from IFW_MQTT_Client_TestSteps all;
import from MqttTestSuite_Interop all;
import from TitanLoggerControl all;

//ethgry: TEMPORAL MODULEPARS FOR TESTING
  modulepar
  {
    float tsp_MQTT_Client_maxResponseTime := 0.0;
    float tsp_LegoTruckDirChangeDelay := 1.0;
    boolean tsp_BlockControlInPitStop := true;
//ethgry: TEMPORAL MODULEPARS FOR TESTING
    charstring ButtonPushed := "LET_FINISH_TESTING";
    boolean isDebugSet := false;
  }

//=======================================================
//GPIO pins used in HW setup:
const integer gpio_pin_lamp := 12;
const integer gpio_pin_steerRight := 18;
const integer gpio_pin_steerLeft := 23;
const integer gpio_pin_motoForw := 24;
const integer gpio_pin_motoBack := 25;
const integer gpio_pin_LEDButton := 27;
const integer gpio_pin_LED2 := 22;
const integer gpio_pin_LED3 := 26;
const integer gpio_pin__unexpected__recv := 21;
const integer gpio_pin_recvSignal4TimeMeas := 6;
const integer gpio_pin_sendSignal4TimeMeas := 17;
//=======================================================

//GPIO direction and value constants
const GPIO_PIN_DIRECTION pin_direction_OUT := OUT;
const GPIO_PIN_DIRECTION pin_direction_IN := IN;
const GPIO_PIN_VALUE pin_value_HIGH := HIGH;
const GPIO_PIN_VALUE pin_value_LOW := LOW;
//time to wait RPi to create directories, write values etc.
const float wait_veryShort := 0.1; //don't decrease value! you would risk fatal error
//ethry: used only when debugging GPIO pin initialization
const charstring gpio_pin_dir_base := "/sys/class/gpio/gpio";

type record of integer GPIO_PinList;

  type enumerated LAMP { ON, OFF};
  type enumerated DIRECTION { LEFT, STRAIGHT, RIGHT };
  type enumerated ENGINE { FWD, STOP, BACK};



//ethgry: component type added
type component LegoTruckControl_CT extends GPIO_Base, IFW_MAIN_CT, IFW_MQTT_Client_CT {

    var LAMP v_lamp := OFF;
    var DIRECTION v_direction := STRAIGHT;
    var ENGINE v_engine := STOP
    var boolean v_inPitStop := false;
    var charstring msg := "";

	timer t_short;
	timer t_short2;

}

//////////////////////////////////////////////
//
// Receiving an MQTT message
//
//////////////////////////////////////////////

testcase tc_Mqtt_client_subscribe() runs on LegoTruckControl_CT
  {
    setverdict(pass);
 
	//ethgry:creates alive MQTT client comp.,adds compId to client components list, sets context (connId,local&remote IPaddr&ports)
	var integer mqtt_client := f_IFW_addComponent(MQTT_CLIENT, "mqtt_client");
	
	//ethgry:sets remoteIP&port for mqtt broker
        f_IFW_MqttClient_setRemote(mqtt_client, "mqtt_server");

	f_IFW_initComponents();
	

    f_LegoTruck_GPIO_init (pin_direction_OUT,
       {gpio_pin_lamp,gpio_pin_steerRight,gpio_pin_steerLeft,gpio_pin_motoForw,gpio_pin_motoBack})
	  
	f_connect(mqtt_client);

    f_IFW_MqttClient_setMessageToSend(mqtt_client, valueof(t_subscribe("/hackethon2017/lego", 2, AT_MOST_ONCE_DELIVERY)));

      //ethgry:sends out encoded msgToSend on an IPL4 port
      f_IFW_MqttClient_send(mqtt_client);
 
      var boolean loop := true;
      timer t;

      while (loop){

        action( "*************** STATUS ***************");
        action("Engine status: ", v_engine)
        action("Direction: ", v_direction)
        action("Light: ", v_lamp)
        f_IFW_MqttClient_receive(mqtt_client);
        if(ischosen(lastReceived.publish)){
          log("Received message ", oct2char(lastReceived.publish.payload));


          //ethgry: GPIO pin vezerles atmozgatva ide IFW_MQTT_Client.f_MQTT_Client_receive-bol    
          msg := oct2char(lastReceived.publish.payload);
          action("Received message ", msg);
	  
              if ( not v_inPitStop) {
                select(msg){
                  case("C_START"){
                    f_handleUP();
                    if (tsp_BlockControlInPitStop){v_inPitStop := false};
                  }
                  case("UP"){
                    f_handleUP();
                  }
                  case("DOWN"){
                    f_handleDOWN();
                  }
                  case("RIGHT"){
                    f_handleRIGHT();
                  }
                  case("LEFT"){
                    f_handleLEFT();
                  }
                  case("C_STOP"){
                    f_handleSTOP()
                    if (tsp_BlockControlInPitStop){v_inPitStop := true};
                  }

                  case("STOP"){
                    f_handleSTOP();                  }
                  case("LAMP"){
                    f_switchLamp();
                  }
                }
              }
              else {
                select(msg){
                  case("C_START"){
                    gpio[gpio_pin_motoBack].send(GPIO_PIN_DIRECTION:OUT);
                    gpio[gpio_pin_motoForw].send(GPIO_PIN_DIRECTION:OUT);
                    gpio[gpio_pin_motoForw].send(GPIO_PIN_VALUE:HIGH);
                    if (v_engine != STOP){
                      gpio[gpio_pin_steerLeft].send(GPIO_PIN_DIRECTION:OUT);
                      gpio[gpio_pin_steerLeft].send(GPIO_PIN_VALUE:HIGH);
                      gpio[gpio_pin_steerRight].send(GPIO_PIN_DIRECTION:OUT);
                      gpio[gpio_pin_steerRight].send(GPIO_PIN_VALUE:HIGH);
                      v_direction := STRAIGHT;
                    }
                    f_wait(tsp_LegoTruckDirChangeDelay);
                    gpio[gpio_pin_motoBack].send(GPIO_PIN_VALUE:LOW);
                    v_engine := FWD;
                  }
                }
              } //end else  v_BlockControlInPitStop
        } //end else ischosend publish
      } //end loop

      f_handleVerdict(f_IFW_MqttClient_check(mqtt_client, tr_suback({0}, 2)));
	
      f_disconnect(mqtt_client);    
    
      f_IFW_cleanUp();
    
      f_LegoTruck_GPIO_cleanUp({gpio_pin_lamp,gpio_pin_steerRight,gpio_pin_steerLeft,gpio_pin_motoForw,gpio_pin_motoBack});
    }



//////////////////////////////////////////////
//
// Sending with one LED (on port #27)
//
//////////////////////////////////////////////
testcase TC_One_Led_Test() runs on LegoTruckControl_CT {
	log("Starting TC_One_Led_Test");
	
    f_LegoTruck_GPIO_init(pin_direction_OUT,{gpio_pin_LEDButton})
    //ethgry: delays are replaced by the new function
	//t_short.start(0.2); t_short.timeout;
	f_GPIO_wait(0.2);

    gpio[gpio_pin_LEDButton].send(pin_value_HIGH);

    //ethgry: delays are replaced by the new function
	//t_short.start(2.0); t_short.timeout;
	f_LegoTruck_shortWait(0.2);

    f_LegoTruck_GPIO_cleanUp ({gpio_pin_LEDButton})	
	setverdict(pass);
}

//////////////////////////////////////////////////////////
//
// Sending to two LEDs with ARRAY (ports: #22,#26)
//
//////////////////////////////////////////////////////////
testcase TC_More_Led_Test() runs on LegoTruckControl_CT {
	log("Starting TC_More_Led_Test");
	
    f_LegoTruck_GPIO_init(pin_direction_OUT,{gpio_pin_LED2,gpio_pin_LED3})

    //ethgry: delays are replaced by the new function
    //t_short.start(0.2); t_short.timeout;
    f_LegoTruck_shortWait(0.2);

	//------------------------
	//ethgry: delays are replaced by the new function
	gpio[gpio_pin_LED2].send(pin_value_HIGH); gpio[gpio_pin_LED3].send(pin_value_LOW);  f_LegoTruck_shortWait(0.4);
	gpio[gpio_pin_LED2].send(pin_value_LOW);  gpio[gpio_pin_LED3].send(pin_value_HIGH); f_LegoTruck_shortWait(0.4);
	gpio[gpio_pin_LED2].send(pin_value_HIGH); gpio[gpio_pin_LED3].send(pin_value_LOW);  f_LegoTruck_shortWait(0.4);
	gpio[gpio_pin_LED2].send(pin_value_LOW);  gpio[gpio_pin_LED3].send(pin_value_HIGH); f_LegoTruck_shortWait(0.4);
	gpio[gpio_pin_LED2].send(pin_value_HIGH); gpio[gpio_pin_LED3].send(pin_value_LOW);  f_LegoTruck_shortWait(0.4);
	gpio[gpio_pin_LED2].send(pin_value_LOW);  gpio[gpio_pin_LED3].send(pin_value_HIGH); f_LegoTruck_shortWait(0.4);
	gpio[gpio_pin_LED2].send(pin_value_HIGH); gpio[gpio_pin_LED3].send(pin_value_LOW);  f_LegoTruck_shortWait(0.4);
	gpio[gpio_pin_LED2].send(pin_value_LOW);  gpio[gpio_pin_LED3].send(pin_value_HIGH); f_LegoTruck_shortWait(0.4);
	gpio[gpio_pin_LED2].send(pin_value_HIGH); gpio[gpio_pin_LED3].send(pin_value_LOW);  f_LegoTruck_shortWait(0.4);
	//------------------------

    f_LegoTruck_GPIO_cleanUp ({gpio_pin_LED2,gpio_pin_LED3})	
	
	setverdict(pass);
}

//////////////////////////////////////////////
//
// Receiving from one BUTTON
//
//////////////////////////////////////////////
testcase TC_One_Button_Test() runs on LegoTruckControl_CT {
	log("Starting TC_One_Led_Test");
	
    f_LegoTruck_GPIO_init(pin_direction_OUT,{gpio_pin_LED2,gpio_pin_LED3});
    f_LegoTruck_GPIO_init(pin_direction_IN,{gpio_pin_LEDButton});

	t_short.start(0.2); t_short.timeout;

	var integer v_index;

    t_short.start(5.0);
    	
    	alt {
        	[] gpio[gpio_pin_LEDButton].receive {
        	//ethgry: delays are replaced by the new function
			gpio[gpio_pin_LED2].send(pin_value_HIGH);	gpio[gpio_pin_LED3].send(pin_value_LOW); f_LegoTruck_shortWait(0.4);
			gpio[gpio_pin_LED2].send(pin_value_LOW); gpio[gpio_pin_LED3].send(pin_value_HIGH); f_LegoTruck_shortWait(0.4);
			gpio[gpio_pin_LED2].send(pin_value_HIGH);	gpio[gpio_pin_LED3].send(pin_value_LOW); f_LegoTruck_shortWait(0.4);
			gpio[gpio_pin_LED2].send(pin_value_LOW); gpio[gpio_pin_LED3].send(pin_value_HIGH); f_LegoTruck_shortWait(0.4);
           		setverdict(pass,"message received on port index ", gpio_pin_LEDButton);
           	}
        	[] any from gpio.receive -> @index value v_index {
           		setverdict(fail,"unexpected message received on port index: ",v_index);
           	}
        	[] t_short.timeout {
           		log("Timeout while waiting for input to change");
           		setverdict(fail);
		}
        }
    
    f_LegoTruck_GPIO_cleanUp({gpio_pin_LED2,gpio_pin_LED3,gpio_pin_LEDButton});

	setverdict(pass);
}

//////////////////////////////////////////////
//
// Receiving unexpected BUTTON pressing
//
//////////////////////////////////////////////
testcase TC_Unexpected_Button() runs on LegoTruckControl_CT {
	log("Starting TC_One_Led_Test");
	
    f_LegoTruck_GPIO_init(pin_direction_OUT,{gpio_pin_LED2,gpio_pin_LED3});
    f_LegoTruck_GPIO_init(pin_direction_IN,{gpio_pin_LEDButton,gpio_pin__unexpected__recv});

	t_short.start(0.2); t_short.timeout;

	var integer v_index;

    	t_short.start(6.0);
    	
    	alt {
        	[] gpio[gpio_pin_LEDButton].receive {
			   gpio[gpio_pin_LED2].send(pin_value_HIGH); t_short2.start(1.0); t_short2.timeout;
		
           	}
        	[] any from gpio.receive -> @index value v_index {
           	   setverdict(pass,"unexpected message received on port index: ",v_index);
			   gpio[gpio_pin_LED3].send(pin_value_HIGH);	t_short2.start(1.0); t_short2.timeout;	
           	}
        	[] t_short.timeout {
           		log("Timeout while waiting for input to change");
           		setverdict(fail);
		}
        }
    
    f_LegoTruck_GPIO_cleanUp({gpio_pin_LED2,gpio_pin_LED3,gpio_pin_LEDButton,gpio_pin__unexpected__recv});
    	
	setverdict(pass);
}

//////////////////////////////////////////////
//
// Measuring speed
//
//////////////////////////////////////////////
testcase TC_Measuring_speed() runs on LegoTruckControl_CT {
	log("TC_Measuring_speed");
	
    f_LegoTruck_GPIO_init(pin_direction_OUT,{gpio_pin_sendSignal4TimeMeas});
    f_LegoTruck_GPIO_init(pin_direction_IN,{gpio_pin_recvSignal4TimeMeas});

//ethgry: replaced by the new function
//	t_short.start(0.2); t_short.timeout;
    f_LegoTruck_shortWait(0.2);

	var integer v_index;

	//STARTING TIMER
    	t_short.start(6.0);
        gpio[17].send(pin_value_HIGH); 

    	alt {
        	[] any from gpio.receive -> @index value v_index {

			//STOPPING TIMER
			var float v_myTimer := t_short.read;
			t_short.stop;    

			setverdict(pass,"message received on port index: ",v_index, 
			", ELLAPSED TIME:",v_myTimer);
           	}
        	[] t_short.timeout {
           		log("Timeout while waiting for input to change");
           		setverdict(fail);
		}
        }
    
    f_LegoTruck_GPIO_cleanUp({gpio_pin_sendSignal4TimeMeas,gpio_pin_recvSignal4TimeMeas});
    	
	setverdict(pass);
}

//////////////////////////////////////////////
//
// Function maps and initializes GPIO ports of the same direction
//
//////////////////////////////////////////////
function f_LegoTruck_GPIO_init (
  GPIO_PIN_DIRECTION p_direction,
  GPIO_PinList p_gpioPinList) runs on LegoTruckControl_CT {
    var integer i;
    
    //Checking if DEBUG logging is set in config file
/*ethgry: disabled temporarily due to a Titan bug (get_file_mask causes DTE)
    var boolean isDebugSet := false;
    var Severities current_filemask := get_file_mask("LegacyLogger");
    for (i:= 0; i<lengthof(current_filemask); i := i+1){
      if(current_filemask[i]==DEBUG_ENCDEC or current_filemask[i]==DEBUG_TESTPORT){isDebugSet := true}
    }
*/

    for (i:= 0; i<lengthof(p_gpioPinList); i := i+1){
      //mapping pin ports
      map(self:gpio[p_gpioPinList[i]],system:gpio[p_gpioPinList[i]]);
      //Leave time for raspbian to create the pin dir
      f_LegoTruck_shortWait(wait_veryShort);
      //if(isDebugSet){f_LegoTruck_checkDirectory(p_gpioPinList[i])}
      //setting direction
      gpio[p_gpioPinList[i]].send(p_direction);
      //Leave time for raspbian to create and write the direction file
      //f_LegoTruck_shortWait(wait_veryShort);
      //if(isDebugSet){f_LegoTruck_checkDirection(p_gpioPinList[i],p_direction)}
      //if direction is OUT setting pin value to HIGH
      if(p_direction == pin_direction_OUT){
        gpio[p_gpioPinList[i]].send(pin_value_HIGH);
        //Leave time for raspbian to create and write the value file
        //f_LegoTruck_shortWait(wait_veryShort);
        //if(isDebugSet){f_LegoTruck_checkValue(p_gpioPinList[i],pin_value_HIGH)}
      }
    }
}

//////////////////////////////////////////////
//
// Waiting shortly
//
//////////////////////////////////////////////
function f_LegoTruck_shortWait(float p_duration)runs on LegoTruckControl_CT{
  t_short.start(p_duration);
  alt { [] t_short.timeout {}
        [else] {repeat} //to disable any activated defaults
  }
}

//////////////////////////////////////////////
//
// Checking if pin directory is created
//
//////////////////////////////////////////////
function f_LegoTruck_checkDirectory(integer p_pin_no) {
	if (f_FIO_fileOrDirExists(gpio_pin_dir_base & int2str(p_pin_no))) {
	  log("Export directory for pin ",p_pin_no," created successfully");
	  setverdict (pass);	  
	} else {
	  setverdict (fail,"Failed to create export directory for pin ",p_pin_no);
	  mtc.stop
	}
}

//////////////////////////////////////////////
//
// Checking if pin direction is written correctly
//
//////////////////////////////////////////////
function f_LegoTruck_checkDirection(
  integer p_pin_no,
  GPIO_PIN_DIRECTION p_direction
) {
		var integer fd := f_FIO_open_rdonly(gpio_pin_dir_base & int2str(p_pin_no) & "/direction");
		var charstring direction, directionExpected;
		var integer ret := f_FIO_read_text_until(fd, direction, "\n");
	
		select (p_direction) {
		  case (OUT) { directionExpected := "out" }
		  case (IN)  { directionExpected := "in" }
		}
	
		  if (direction == directionExpected) {
		    setverdict (pass,"Direction of pin ",p_pin_no," set to ",p_direction," successfully");
		  } else {
		    setverdict (fail,"Direction of pin ",p_pin_no," is not set to ",p_direction,", but is ", direction);
		    mtc.stop
		  }

		f_FIO_close(fd);
}

//////////////////////////////////////////////
//
// Checking if pin value is written correctly
//
//////////////////////////////////////////////
function f_LegoTruck_checkValue(
  integer p_pin_no,
  GPIO_PIN_VALUE p_value
) {
		var integer fd := f_FIO_open_rdonly(gpio_pin_dir_base & int2str(p_pin_no) & "/value");
		var charstring value_ := "", valueExpected;
		var integer ret := f_FIO_read_text_until(fd, value_, "\n");
	
		select (p_value) {
	  		case (HIGH) { valueExpected := "1" }
	  		case (LOW)  { valueExpected := "0" }
		}

		if (value_ == valueExpected) {
	  		log("Value of pin ",p_pin_no," set to ", p_value, " successfully");
	  		setverdict (pass);
		} else {
	  		log("Value of pin ",p_pin_no," is not set to ",p_value," but is", value_);
	  		setverdict (fail);
	  		mtc.stop;
		}
	
		f_FIO_close(fd);
}

//////////////////////////////////////////////
//
// Unmaping GPIO ports
//
//////////////////////////////////////////////
function f_LegoTruck_GPIO_cleanUp (GPIO_PinList p_gpioPinList) runs on LegoTruckControl_CT{
  for (var integer i:= 0; i<lengthof(p_gpioPinList); i := i+1){
     unmap(self:gpio[p_gpioPinList[i]],system:gpio[p_gpioPinList[i]]);
  }
}

//////////////////////////////////////////////
//
// wait function
//
//////////////////////////////////////////////
  function f_wait(in float delay) 
  {
    timer t:=delay;
    t.start;
    t.timeout;
  }

//////////////////////////////////////////////
//
// Set GPIO port function
//
//////////////////////////////////////////////
  function f_setGPIO(in integer portNo) runs on LegoTruckControl_CT
  {
    gpio[portNo].send(GPIO_PIN_DIRECTION:OUT);
    gpio[portNo].send(GPIO_PIN_VALUE:HIGH);
  }

//////////////////////////////////////////////
//
// Clear GPIO port function
//
//////////////////////////////////////////////
  function f_clearGPIO(in integer portNo) runs on LegoTruckControl_CT
  {
    gpio[portNo].send(GPIO_PIN_DIRECTION:OUT);
    gpio[portNo].send(GPIO_PIN_VALUE:LOW);
  }

//////////////////////////////////////////////
//
// Handle STOP function
//
//////////////////////////////////////////////
  function f_handleSTOP() runs on LegoTruckControl_CT
  {
    // f_setGPIO(gpio_pin_lamp);
    // v_lamp := OFF
    f_setGPIO(gpio_pin_motoForw);
    f_setGPIO(gpio_pin_motoBack);
    f_setGPIO(gpio_pin_steerRight);
    f_setGPIO(gpio_pin_steerLeft);
    v_direction := STRAIGHT;
    v_engine := STOP;
  }

//////////////////////////////////////////////
//
// Handle UP function
//
//////////////////////////////////////////////
  function f_handleUP() runs on LegoTruckControl_CT
  {
    f_setGPIO(gpio_pin_motoForw)
    if (v_engine != STOP){
      f_setGPIO(gpio_pin_steerLeft);
      f_setGPIO(gpio_pin_steerRight);
      v_direction := STRAIGHT;
    }
    f_wait(tsp_LegoTruckDirChangeDelay);
    f_clearGPIO(gpio_pin_motoBack);
    v_engine := FWD;
 }

//////////////////////////////////////////////
//
// Handle DOWN function
//
//////////////////////////////////////////////
  function f_handleDOWN() runs on LegoTruckControl_CT
  {
    f_setGPIO(gpio_pin_motoBack)
    if (v_engine != STOP){
      f_setGPIO(gpio_pin_steerLeft);
      f_setGPIO(gpio_pin_steerRight);
      v_direction := STRAIGHT;
    }
    f_wait(tsp_LegoTruckDirChangeDelay);
    f_clearGPIO(gpio_pin_motoForw);
    v_engine := BACK;
  }

//////////////////////////////////////////////
//
// Handle RIGHT function
//
//////////////////////////////////////////////
  function f_handleRIGHT() runs on LegoTruckControl_CT
  {
    select(v_direction){
      case(LEFT){ 
        f_setGPIO(gpio_pin_steerRight);
        v_direction := STRAIGHT;
      }
      case(STRAIGHT){
        f_clearGPIO(gpio_pin_steerLeft);
        v_direction := RIGHT;
      }
      case(RIGHT) {}
      }
  }

//////////////////////////////////////////////
//
// Handle LEFT function
//
//////////////////////////////////////////////
  function f_handleLEFT() runs on LegoTruckControl_CT
  {
    select(v_direction){
      case(LEFT){}
      case(STRAIGHT){
        f_clearGPIO(gpio_pin_steerRight);
        v_direction := LEFT;
      }
      case(RIGHT) {
        f_setGPIO(gpio_pin_steerLeft);
        v_direction := STRAIGHT;
      }
    }
  }

//////////////////////////////////////////////
//
// Swithch function
//
//////////////////////////////////////////////
  function f_switchLamp() runs on LegoTruckControl_CT
  {
    select(v_lamp){
      case(ON){
        f_setGPIO(gpio_pin_lamp);
        v_lamp := OFF;
        }
      case(OFF){
        f_clearGPIO(gpio_pin_lamp);
        v_lamp := ON;
      }
    }
  }
 

control {
	execute(tc_Mqtt_client_subscribe());
	//execute(TC_One_Led_Test());
	//execute(TC_More_Led_Test());
	//execute(TC_One_Button_Test());

	//receiving message from an "unexpected" button on #21, expected: #27 
	//execute(TC_Unexpected_Button());
	
	//sending on #17, receiving on #6 =>  measuring ellapsed time
	//execute(TC_Measuring_speed());		
}

}
